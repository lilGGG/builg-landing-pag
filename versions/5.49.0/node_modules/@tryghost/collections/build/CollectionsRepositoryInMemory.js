"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionsRepositoryInMemory = void 0;
// have to use requires until there are type definitions for these modules
const { ValidationError } = require('@tryghost/errors');
const tpl = require('@tryghost/tpl');
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const in_memory_repository_1 = require("@tryghost/in-memory-repository");
const messages = {
    invalidIDProvided: 'Invalid ID provided for Collection'
};
class CollectionsRepositoryInMemory extends in_memory_repository_1.InMemoryRepository {
    constructor() {
        super();
    }
    async create(data) {
        let id;
        if (!data.id) {
            id = new bson_objectid_1.default();
        }
        else if (typeof data.id === 'string') {
            id = bson_objectid_1.default.createFromHexString(data.id);
        }
        else if (data.id instanceof bson_objectid_1.default) {
            id = data.id;
        }
        else {
            throw new ValidationError({
                message: tpl(messages.invalidIDProvided)
            });
        }
        return {
            id: id.toHexString(),
            title: data.title,
            description: data.description,
            type: data.type,
            filter: data.filter,
            feature_image: data.feature_image,
            deleted: data.deleted || false
        };
    }
    toPrimitive(entity) {
        return {
            title: entity.title,
            description: entity.description,
            feature_image: entity.feature_image
        };
    }
}
exports.CollectionsRepositoryInMemory = CollectionsRepositoryInMemory;
